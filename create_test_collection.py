#!/usr/bin/env python3
"""
Script para crear una colecci√≥n de prueba en MongoDB usando configuraci√≥n segura
"""

import sys
import pandas as pd
import numpy as np
from datetime import datetime

def load_config():
    """Cargar configuraci√≥n de MongoDB de forma segura"""
    try:
        from config import MONGODB_CONFIG
        return MONGODB_CONFIG
    except ImportError:
        print("‚ùå Error: No se encontr√≥ el archivo config.py")
        print("üìù Por favor, copia config.example.py como config.py y completa las credenciales")
        sys.exit(1)

def create_test_collection():
    """Crear una colecci√≥n de prueba con datos sint√©ticos"""
    config = load_config()
    conn_string = config["connection_string"]
    db_name = config["database_name"]
    collection_name = "test_collection"
    
    try:
        from core.mongo_loader import MongoDBLoader
        
        print(f"üîó Conectando a MongoDB...")
        print(f"üìä Base de datos: {db_name}")
        print(f"üìÅ Colecci√≥n: {collection_name}")
        
        # Generar datos de prueba
        print("üìä Generando datos de prueba...")
        np.random.seed(123)
        n_records = 50
        
        data = {
            'id': range(1, n_records + 1),
            'producto': [f'Producto_{i}' for i in range(1, n_records + 1)],
            'categoria': np.random.choice(['Electr√≥nicos', 'Ropa', 'Hogar', 'Deportes', 'Libros'], n_records),
            'precio': np.random.uniform(10, 500, n_records).round(2),
            'stock': np.random.randint(0, 100, n_records),
            'rating': np.random.uniform(1, 5, n_records).round(1),
            'fecha_creacion': datetime.now().strftime('%Y-%m-%d'),
            'disponible': np.random.choice([True, False], n_records, p=[0.9, 0.1])
        }
        
        df = pd.DataFrame(data)
        print(f"‚úÖ Generados {len(df)} registros de prueba")
        
        # Conectar e insertar datos
        with MongoDBLoader() as loader:
            if loader.connect(conn_string, db_name):
                print("‚úÖ Conexi√≥n exitosa")
                
                # Insertar datos
                result = loader.save_dataframe_to_collection(df, collection_name)
                
                if result:
                    print(f"‚úÖ Colecci√≥n '{collection_name}' creada exitosamente")
                    print(f"üìä Total de registros insertados: {len(df)}")
                    
                    # Verificar creaci√≥n
                    collections = loader.list_collections()
                    if collection_name in collections:
                        print(f"‚úÖ Colecci√≥n verificada en la base de datos")
                        
                        # Mostrar estad√≠sticas
                        print(f"\nüìà Estad√≠sticas de la colecci√≥n:")
                        print(f"  ‚Ä¢ Categor√≠as √∫nicas: {df['categoria'].nunique()}")
                        print(f"  ‚Ä¢ Precio promedio: ${df['precio'].mean():.2f}")
                        print(f"  ‚Ä¢ Stock total: {df['stock'].sum()}")
                        print(f"  ‚Ä¢ Rating promedio: {df['rating'].mean():.1f}/5.0")
                    
                    return True
                else:
                    print("‚ùå Error al crear la colecci√≥n")
                    return False
            else:
                print("‚ùå No se pudo conectar a MongoDB")
                return False
                
    except ImportError:
        print("‚ùå Error: No se pudo importar MongoDBLoader")
        return False
    except Exception as e:
        print(f"‚ùå Error durante la creaci√≥n: {str(e)}")
        return False

def main():
    """Funci√≥n principal"""
    print("üèóÔ∏è  Creaci√≥n de Colecci√≥n de Prueba - PearsonFlow")
    print("=" * 50)
    
    success = create_test_collection()
    
    if success:
        print("\nüéâ ¬°Colecci√≥n de prueba creada exitosamente!")
        print("üí° Usa quick_mongodb_access.py para acceder a los datos")
    else:
        print("\n‚ùå Error al crear la colecci√≥n de prueba")
        sys.exit(1)

if __name__ == "__main__":
    main() 